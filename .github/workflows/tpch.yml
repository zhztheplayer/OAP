# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Native SQL Engine TPC-H Suite

on:
  pull_request:
    branches: [ master ]

jobs:
  ram-usage-test:
    if: ${{ contains(github.event.pull_request.title, '[oap-native-sql]') || contains(github.event.pull_request.title, '[oap-data-source]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - run: sudo apt-get install cmake
      - run: sudo apt-get install libboost-all-dev
      - name: Install OAP optimized Arrow
        run: |
          cd /tmp
          git clone https://github.com/intel-bigdata/arrow.git
          cd arrow && git checkout oap-master && cd cpp
          mkdir build && cd build
          cmake .. -DARROW_JNI=ON -DARROW_GANDIVA_JAVA=ON -DARROW_GANDIVA=ON -DARROW_PARQUET=ON -DARROW_HDFS=ON -DARROW_FILESYSTEM=ON -DARROW_WITH_SNAPPY=ON -DARROW_JSON=ON -DARROW_DATASET=ON -DARROW_WITH_LZ4=ON && make -j2
          sudo make install
          cd ../../java
          mvn clean install -P arrow-jni -am -Darrow.cpp.build.dir=/tmp/arrow/cpp/build/release/ -DskipTests -Dcheckstyle.skip
      - run: mvn test -DmembersOnlySuites=com.intel.oap.tpch -DtagsToInclude=com.intel.oap.tags.TestAndWriteLogs -pl oap-native-sql/core -am
        env:
          MAVEN_OPTS: "-Xmx2048m"
          RAM_USAGE_LOG_PATH: "/tmp/ram.log"
      - run: echo "::set-output name=event_path::${GITHUB_EVENT_PATH}"
        id: output-envs
      - uses: actions/upload-artifact@v2
        with:
          name: memory_usage_log
          path: /tmp/ram.log
      - uses: actions/upload-artifact@v2
        with:
          name: pr_event
          path: ${{steps.output-envs.outputs.event_path}}
